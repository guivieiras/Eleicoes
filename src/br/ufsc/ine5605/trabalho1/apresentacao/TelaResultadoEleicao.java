package br.ufsc.ine5605.trabalho1.apresentacao;

import br.ufsc.ine5605.trabalho1.controle.ControladorCidade;
import br.ufsc.ine5605.trabalho1.controle.ControladorUrna;
import br.ufsc.ine5605.trabalho1.entidade.Candidato;
import br.ufsc.ine5605.trabalho1.entidade.Cidade;
import br.ufsc.ine5605.trabalho1.entidade.KeyValue;
import br.ufsc.ine5605.trabalho1.entidade.Urna;
import java.awt.Font;
import java.util.LinkedHashMap;
import java.util.Map.Entry;

public class TelaResultadoEleicao extends javax.swing.JFrame {

    private ControladorUrna controlador;

    public TelaResultadoEleicao(ControladorUrna controlador) {
        this.controlador = controlador;
        initComponents();
        imprimeResultado();
        setLocationRelativeTo(null);
        texto_Resultado.setFont(new Font("Consolas", Font.PLAIN, 16));

    }

    

    public void imprimeResultado() {
        for (Cidade cidade : ControladorCidade.getInstance().getLista()) {
            for (Urna urna : controlador.getLista()) {
                if (urna.getCidade().equals(cidade)) {
                    insereTexto(String.format("Seção: %1$d Zona: %2$d Cidade: %3$s\n", urna.getSecaoEleitoral(), urna.getZonaEleitoral(), urna.getCidade().getNome()));
                    insereTexto("--------------- Vereadores ---------------\n");
                    LinkedHashMap<Candidato, Integer> vereadores = controlador.ordenaHashMap(urna.getTotalDeVotosPorVereador());
                    for (Entry<Candidato, Integer> entry : vereadores.entrySet()) {
                        insereTexto(entry.getKey().getNome() + "  (" + entry.getValue() + " votos)\n");
                    }
                    insereTexto(urna.getVotosInvalidosParaVerador()+ " votos inválidos ("+urna.getVotosBrancosParaVereador()+ " brancos e "+urna.getVotosNulosParaVereador()+" nulos)\n");

                    insereTexto("--------------- Prefeitos  ---------------\n");
                    LinkedHashMap<Candidato, Integer> prefeitos = controlador.ordenaHashMap(urna.getTotalDeVotosPorPrefeito());
                    for (Entry<Candidato, Integer> entry : prefeitos.entrySet()) {
                        insereTexto(entry.getKey().getNome() + "  (" + entry.getValue() + " votos)\n");
                    }
                    insereTexto(urna.getVotosInvalidosParaPrefeito() + " votos inválidos ("+urna.getVotosBrancosParaPrefeito() + " brancos e "+urna.getVotosNulosParaPrefeito()+" nulos)\n");
                    //insereTexto("-------------- " + urna.getAbstencoes() + " abstenções --------------\n");
                    insereTexto("-----------------------------------------\n");

                    insereTexto("\n\n");
                }
            }
            insereTexto("--------- Vencedores " + cidade.getNome() + " --------\n");
            KeyValue<Candidato, Integer> prefeitoVotos = controlador.prefeitoVencedor(cidade);
            insereTexto(String.format("Prefeito vencedor: %1$s (%2$d votos)\n", prefeitoVotos.key.getNome(), prefeitoVotos.value));
            insereTexto("Vereadores:\n");

            LinkedHashMap<Candidato, Integer> vereadoresVencedores = controlador.vereadorVencedor(cidade);
            int vagas = 3;
            for (Entry<Candidato, Integer> entry : vereadoresVencedores.entrySet()) {
                if (vagas > -100) {
                    insereTexto(entry.getKey().getNome() + "  (" + entry.getValue() + " votos)\n");
                }
                vagas--;
            }

            insereTexto("------------------------------------------\n");
            insereTexto("\n--------------------------------------------------------------------------------------------------\n\n");
        }
    }

    public void insereTexto(String txt) {
        texto_Resultado.append(txt);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        texto_Resultado = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Resultado");

        texto_Resultado.setColumns(20);
        texto_Resultado.setRows(5);
        jScrollPane1.setViewportView(texto_Resultado);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 937, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 532, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea texto_Resultado;
    // End of variables declaration//GEN-END:variables
}
